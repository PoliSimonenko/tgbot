import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
import os
from dotenv import load_dotenv
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_buttons = [
    [KeyboardButton('–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω')],
    [KeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç "–ö—Ç–æ —Ç—ã –∏–∑ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ù–µ–º–∞–Ω"')],
    [KeyboardButton('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥–∏–¥ –ø–æ –∑–∞–≤–æ–¥—É –∏ –º—É–∑–µ—é')],
    [KeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')],
]
main_menu_markup = ReplyKeyboardMarkup(main_menu_buttons, resize_keyboard=True)

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
QUIZ_QUESTIONS = [
    {
        'question': '1. –í–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?',
        'options': ['üîµ –°–∏–Ω–∏–π', 'üü¢ –ó–µ–ª–µ–Ω—ã–π', 'üî¥ –ö—Ä–∞—Å–Ω—ã–π', '‚ö™ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π']
    },
    {
        'question': '2. –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –≤–∞–º –±–ª–∏–∂–µ?',
        'options': ['üèõ –ö–ª–∞—Å—Å–∏–∫–∞', 'ü™© –ú–æ–¥–µ—Ä–Ω', 'üé≠ –ê–≤–∞–Ω–≥–∞—Ä–¥', 'üåø –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π']
    },
    {
        'question': '3. –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä?',
        'options': ['üç∑ –£–∂–∏–Ω –ø—Ä–∏ —Å–≤–µ—á–∞—Ö', 'üé® –¢–≤–æ—Ä—á–µ—Å–∫–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è', 'üèïÔ∏è –ü–∏–∫–Ω–∏–∫ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ', 'üé™ –í–µ—á–µ—Ä–∏–Ω–∫–∞ —Å –¥—Ä—É–∑—å—è–º–∏']
    },
    {
        'question': '4. –ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤–∞–º –Ω—É–∂–µ–Ω?',
        'options': ['ü•Ç –î–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞', 'üñºÔ∏è –î–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è –¥–æ–º–∞', 'üéÅ –î–ª—è –ø–æ–¥–∞—Ä–∫–∞', 'üíé –î–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏']
    },
    {
        'question': '5. –í–∞—à –¥–µ–≤–∏–∑?',
        'options': ['¬´–ö—Ä–∞—Å–æ—Ç–∞ –≤ –¥–µ—Ç–∞–ª—è—Ö¬ª', '¬´–°–º–µ–ª–æ—Å—Ç—å ‚Äî –º–æ—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è¬ª', '¬´–¢—Ä–∞–¥–∏—Ü–∏–∏ ‚Äî —ç—Ç–æ –≤–µ—á–Ω–æ¬ª',
                    '¬´–ì–ª–∞–≤–Ω–æ–µ ‚Äî –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å¬ª']
    },
    {
        'question': '6. –õ—é–±–∏–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª?',
        'options': ['üíé –•—Ä—É—Å—Ç–∞–ª—å', 'ü™î –ú–∞—Ç–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ', 'üé® –¶–≤–µ—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ', '‚ú® –ì—Ä–∞–Ω–µ–Ω–æ–µ —Å—Ç–µ–∫–ª–æ']
    },
    {
        'question': '7. –í–∞—à–∞ —Å—É–ø–µ—Ä—Å–∏–ª–∞?',
        'options': ['üïäÔ∏è –£–º–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å', 'üèπ –†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'üßø –¢–≤–æ—Ä—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è', 'üõ°Ô∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å']
    }
]

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
QUIZ_RESULTS = {
    '–ë–æ–∫–∞–ª "France"': {
        'description': '–í—ã ‚Äî –±–æ–∫–∞–ª "France"! üç∑ –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π –±–æ–∫–∞–ª —Å —Ç–æ–Ω–∫–æ–π –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–æ–π. –°–∏–º–≤–æ–ª —É—Ç–æ–Ω—á–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —à–∏–∫–∞. –í–∞—à —Å—Ç–∏–ª—å ‚Äî –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç—å –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏.',
        'image': 'https://example.com/france.jpg'
    },
    '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–∞–∑–∞ "–û—Ö–æ—Ç–∞ –Ω–∞ —É—Ç–∫—É"': {
        'description': '–í—ã ‚Äî –≤–∞–∑–∞ "–û—Ö–æ—Ç–∞ –Ω–∞ —É—Ç–∫—É"! ü¶Ü –í–∞–∑–∞ —Å —Ä—É—á–Ω–æ–π —Ä–æ—Å–ø–∏—Å—å—é –≤ –æ—Ö–æ—Ç–Ω–∏—á—å–µ–º —Å—Ç–∏–ª–µ. –í–∞—à–∞ –∂–∏–∑–Ω—å ‚Äî —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ, –∞ –≤–∞—à –¥–æ–º ‚Äî –≥–∞–ª–µ—Ä–µ—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π.',
        'image': 'https://example.com/hunting_vase.jpg'
    },
    '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ "–î—Ä–∞–∫–æ–Ω"': {
        'description': '–í—ã ‚Äî "–î—Ä–∞–∫–æ–Ω"! üêâ –°—Ç–µ–∫–ª—è–Ω–Ω–∞—è —Å–∫—É–ª—å–ø—Ç—É—Ä–∞ –º–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞. –í–∞—à–∞ —Ö–∞—Ä–∏–∑–º–∞ –∑–∞–≤–æ—Ä–∞–∂–∏–≤–∞–µ—Ç, –∞ –≤–∫—É—Å –ª–æ–º–∞–µ—Ç —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø—ã.',
        'image': 'https://example.com/dragon.jpg'
    },
    '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ "–ú–µ—à–æ—á–µ–∫"': {
        'description': '–í—ã ‚Äî "–ú–µ—à–æ—á–µ–∫"! üõçÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–Ω—ã–π —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π –º–µ—à–æ—á–µ–∫ —Å –ø–æ–∑–æ–ª–æ—Ç–æ–π. –í—ã —É–º–µ–µ—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é –≤–æ–∫—Ä—É–≥.',
        'image': 'https://example.com/pouch.jpg'
    },
    '–®–∫–∞—Ç—É–ª–∫–∞ "–Ø–π—Ü–æ"': {
        'description': '–í—ã ‚Äî —à–∫–∞—Ç—É–ª–∫–∞ "–Ø–π—Ü–æ"! ü•ö –•—Ä—É—Å—Ç–∞–ª—å–Ω–æ–µ —è–π—Ü–æ —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º. –í –≤–∞—Å —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Ç–∞–π–Ω–∞ –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ —Ñ–æ—Ä–º.',
        'image': 'https://example.com/egg.jpg'
    },
    '–ú–µ–Ω–∞–∂–Ω–∏—Ü–∞ "–¢—Ä–∏–æ"': {
        'description': '–í—ã ‚Äî –º–µ–Ω–∞–∂–Ω–∏—Ü–∞ "–¢—Ä–∏–æ"! üçΩÔ∏è –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ —Ç—Ä–µ—Ö —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã—Ö –º–µ–Ω–∞–∂–Ω–∏—Ü. –í—ã –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç–µ –ª—é–¥–µ–π –∏ –ª—é–±–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã.',
        'image': 'https://example.com/trio.jpg'
    },
    '–ü—Ä–∏–±–æ—Ä "–†–µ—Å–ø–µ–∫—Ç"': {
        'description': '–í—ã ‚Äî –ø—Ä–∏–±–æ—Ä "–†–µ—Å–ø–µ–∫—Ç"! ü•É –°—Ç—Ä–æ–≥–∏–π –Ω–∞–±–æ—Ä –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏–∑ –º–∞—Ç–æ–≤–æ–≥–æ —Å—Ç–µ–∫–ª–∞. –í–∞—à —Å—Ç–∏–ª—å ‚Äî —ç—Ç–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –≤–∫—É—Å.',
        'image': 'https://example.com/respect.jpg'
    }
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç–±–æ—Ç —Å—Ç–µ–∫–ª–æ–∑–∞–≤–æ–¥–∞ ¬´–ù–µ–º–∞–Ω¬ª.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "- –°–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å—Ç–µ–∫–ª—è–Ω–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è\n"
        "- –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ¬´–ö—Ç–æ —Ç—ã –∏–∑ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ù–µ–º–∞–Ω¬ª\n"
        "- –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≥–∏–¥–æ–º –ø–æ –∑–∞–≤–æ–¥—É –∏ –º—É–∑–µ—é\n"
        "- –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await update.message.reply_text(welcome_text, reply_markup=main_menu_markup)


# –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞
async def start_design(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé® –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –¥–∏–∑–∞–π–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–¥–µ–ª–∏—è:",
        reply_markup=ReplyKeyboardMarkup([
            ["–ë–æ–∫–∞–ª", "–í–∞–∑–∞", "–°—Ç–∞–∫–∞–Ω"],
            ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True)
    )
    context.user_data["design_stage"] = "type"


async def handle_design(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stage = context.user_data.get("design_stage")
    text = update.message.text

    if text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup)
        context.user_data.clear()
        return

    if stage == "type":
        context.user_data["design_type"] = text
        await update.message.reply_text(
            "üåà –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç–µ–∫–ª–∞:",
            reply_markup=ReplyKeyboardMarkup([
                ["–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π", "–†–æ–∑–æ–≤—ã–π"],
                ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ], resize_keyboard=True)
        )
        context.user_data["design_stage"] = "color"

    elif stage == "color":
        context.user_data["design_color"] = text
        await update.message.reply_text(
            "‚ú® –î–æ–±–∞–≤—å—Ç–µ —É–∑–æ—Ä (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            reply_markup=ReplyKeyboardMarkup([
                ["–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π", "–¶–≤–µ—Ç–æ—á–Ω—ã–π", "–ë–µ–∑ —É–∑–æ—Ä–∞"],
                ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ], resize_keyboard=True)
        )
        context.user_data["design_stage"] = "pattern"

    elif stage == "pattern":
        context.user_data["design_pattern"] = text
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –¥–∏–∑–∞–π–Ω –≥–æ—Ç–æ–≤!\n\n"
            f"–¢–∏–ø: {context.user_data['design_type']}\n"
            f"–¶–≤–µ—Ç: {context.user_data['design_color']}\n"
            f"–£–∑–æ—Ä: {context.user_data['design_pattern']}\n\n"
            f"–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π!",
            reply_markup=main_menu_markup
        )
        context.user_data.clear()


# –°—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∞
async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["quiz_answers"] = []
    context.user_data["current_question"] = 0
    await ask_question(update, context)


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current = context.user_data["current_question"]
    if current < len(QUIZ_QUESTIONS):
        question = QUIZ_QUESTIONS[current]
        options = question['options'] + ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]

        await update.message.reply_text(
            question['question'],
            reply_markup=ReplyKeyboardMarkup(
                [options[i:i + 2] for i in range(0, len(options), 2)],
                resize_keyboard=True
            )
        )
    else:
        await finish_quiz(update, context)


async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup)
        context.user_data.clear()
        return

    context.user_data["quiz_answers"].append(text)
    context.user_data["current_question"] += 1
    await ask_question(update, context)


async def finish_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
    answers = context.user_data["quiz_answers"]
    result_key = list(QUIZ_RESULTS.keys())[hash(tuple(answers)) % len(QUIZ_RESULTS)]
    result = QUIZ_RESULTS[result_key]

    await update.message.reply_text(
        result['description'],
        reply_markup=main_menu_markup
    )
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ
    # await update.message.reply_photo(photo=result['image'])
    context.user_data.clear()


# –°—Ü–µ–Ω–∞—Ä–∏–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–∏–¥–∞
async def send_tour(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üè≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä –ø–æ –∑–∞–≤–æ–¥—É –ù–µ–º–∞–Ω!",
        reply_markup=ReplyKeyboardMarkup([
            ["–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–æ–¥–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"],
            ["–ú—É–∑–µ–π —Å—Ç–µ–∫–ª–∞", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True)
    )


async def handle_tour(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup)
        return

    responses = {
        "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–æ–¥–∞": "üìú –ó–∞–≤–æ–¥ –ù–µ–º–∞–Ω –æ—Å–Ω–æ–≤–∞–Ω –≤ 1883 –≥–æ–¥—É...",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞": "üîß –£ –Ω–∞—Å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏...",
        "–ú—É–∑–µ–π —Å—Ç–µ–∫–ª–∞": "üñºÔ∏è –í –Ω–∞—à–µ–º –º—É–∑–µ–µ —Å–æ–±—Ä–∞–Ω–æ –±–æ–ª–µ–µ 5000 —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤..."
    }

    await update.message.reply_text(
        responses.get(text, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é."),
        reply_markup=ReplyKeyboardMarkup([
            ["–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–æ–¥–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"],
            ["–ú—É–∑–µ–π —Å—Ç–µ–∫–ª–∞", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True)
    )


# –°—Ü–µ–Ω–∞—Ä–∏–π —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
async def request_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìû –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
            ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True)
    )


async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {contact.first_name}! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.",
        reply_markup=main_menu_markup
    )


# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == '–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω':
        await start_design(update, context)
    elif text == '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç "–ö—Ç–æ —Ç—ã –∏–∑ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ù–µ–º–∞–Ω"':
        await start_quiz(update, context)
    elif text == '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥–∏–¥ –ø–æ –∑–∞–≤–æ–¥—É –∏ –º—É–∑–µ—é':
        await send_tour(update, context)
    elif text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º':
        await request_contact(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu_markup)


def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))

    application.run_polling()


if __name__ == '__main__':
    main()