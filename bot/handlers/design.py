from telebot import types
from config.settings import Config
import os
import uuid
from datetime import datetime
from bot.keyboards import get_main_menu, get_back_button, get_design_type_keyboard, get_confirm_keyboard

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
UPLOAD_FOLDER = 'user_designs'
DESIGN_BRIEFS_FOLDER = 'design_briefs'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(DESIGN_BRIEFS_FOLDER, exist_ok=True)


class DesignState:
    AWAITING_TYPE = 1
    AWAITING_DESIGN = 2
    AWAITING_DESCRIPTION = 3
    AWAITING_QUANTITY = 4
    AWAITING_CONFIRMATION = 5


active_design_sessions = {}
design_requests = {}


class DesignRequest:
    def __init__(self, user_id):
        self.user_id = user_id
        self.design_type = None
        self.photo_path = None
        self.description = None
        self.quantity = 1
        self.urgency = 'standard'
        self.created_at = datetime.now()
        self.status = 'new'
        self.request_id = str(uuid.uuid4())[:8]


def register_design_handlers(bot):
    @bot.message_handler(func=lambda msg: msg.text == "üé® –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω")
    def start_design_session(message):
        """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞"""
        chat_id = message.chat.id
        active_design_sessions[chat_id] = DesignState.AWAITING_TYPE
        design_requests[chat_id] = DesignRequest(message.from_user.id)

        bot.send_message(
            chat_id,
            "üñåÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∑–∞–π–Ω–∞:",
            reply_markup=get_design_type_keyboard()
        )

    @bot.message_handler(func=lambda msg: (
            active_design_sessions.get(msg.chat.id) == DesignState.AWAITING_TYPE and
            msg.text in ["–í–∞–∑–∞", "–°—Ç–∞–∫–∞–Ω", "–ë–æ–∫–∞–ª", "–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ", "–î—Ä—É–≥–æ–µ"]
    ))
    def handle_design_type(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–∏–∑–∞–π–Ω–∞"""
        chat_id = message.chat.id
        design_requests[chat_id].design_type = message.text
        active_design_sessions[chat_id] = DesignState.AWAITING_DESIGN

        bot.send_message(
            chat_id,
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —ç—Å–∫–∏–∑–∞:",
            reply_markup=get_back_button()
        )

    @bot.message_handler(
        content_types=['photo'],
        func=lambda msg: active_design_sessions.get(msg.chat.id) == DesignState.AWAITING_DESIGN
    )
    def handle_design_photo(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        chat_id = message.chat.id
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            filename = f"design_{message.from_user.id}_{message.message_id}.jpg"
            save_path = os.path.join(UPLOAD_FOLDER, filename)

            with open(save_path, 'wb') as f:
                f.write(downloaded_file)

            design_requests[chat_id].photo_path = save_path
            active_design_sessions[chat_id] = DesignState.AWAITING_DESCRIPTION

            bot.send_message(
                chat_id,
                "üìù –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∞—à–µ–º—É —ç—Å–∫–∏–∑—É:",
                reply_markup=get_back_button()
            )

        except Exception as e:
            bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}",
                reply_markup=get_main_menu()
            )
            clean_up_session(chat_id)

    @bot.message_handler(
        func=lambda msg: (
                active_design_sessions.get(msg.chat.id) == DesignState.AWAITING_DESCRIPTION and
                msg.text and
                msg.text != "–û—Ç–º–µ–Ω–∞"
        )
    )
    def handle_design_description(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        chat_id = message.chat.id
        design_requests[chat_id].description = message.text
        active_design_sessions[chat_id] = DesignState.AWAITING_QUANTITY

        bot.send_message(
            chat_id,
            "üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π (1-100):",
            reply_markup=get_back_button()
        )

    @bot.message_handler(
        func=lambda msg: (
                active_design_sessions.get(msg.chat.id) == DesignState.AWAITING_QUANTITY and
                msg.text.isdigit() and
                1 <= int(msg.text) <= 100
        )
    )
    def handle_quantity(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–¥–µ–ª–∏–π"""
        chat_id = message.chat.id
        design_requests[chat_id].quantity = int(message.text)
        active_design_sessions[chat_id] = DesignState.AWAITING_CONFIRMATION

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
        request = design_requests[chat_id]
        summary = (
            f"üìã –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
            f"–¢–∏–ø: {request.design_type}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.description}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )

        if request.photo_path:
            try:
                with open(request.photo_path, 'rb') as photo:
                    bot.send_photo(
                        chat_id,
                        photo,
                        caption=summary,
                        reply_markup=get_confirm_keyboard()
                    )
                    return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

        bot.send_message(
            chat_id,
            summary,
            reply_markup=get_confirm_keyboard()
        )

    @bot.message_handler(
        func=lambda msg: (
                active_design_sessions.get(msg.chat.id) == DesignState.AWAITING_CONFIRMATION and
                msg.text in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –ò–∑–º–µ–Ω–∏—Ç—å"]
        )
    )
    def handle_confirmation(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        chat_id = message.chat.id
        if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            request = design_requests[chat_id]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            save_design_brief(chat_id)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(
                chat_id,
                "üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ù–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{request.request_id}",
                reply_markup=get_main_menu()
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            notify_admin(bot, chat_id)

        else:
            bot.send_message(
                chat_id,
                "üîÑ –ù–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∑–∞–π–Ω–∞:",
                reply_markup=get_design_type_keyboard()
            )
            active_design_sessions[chat_id] = DesignState.AWAITING_TYPE

        clean_up_session(chat_id)

    @bot.message_handler(
        func=lambda msg: (
                active_design_sessions.get(msg.chat.id) is not None and
                msg.text == "–û—Ç–º–µ–Ω–∞"
        )
    )
    def cancel_design_session(message):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –¥–∏–∑–∞–π–Ω–∞"""
        chat_id = message.chat.id
        bot.send_message(
            chat_id,
            "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        clean_up_session(chat_id)

    @bot.message_handler(commands=['my_designs'])
    def show_user_designs(message):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        pass


def save_design_brief(chat_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª"""
    request = design_requests[chat_id]
    filename = f"brief_{request.request_id}.txt"
    filepath = os.path.join(DESIGN_BRIEFS_FOLDER, filename)

    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{request.request_id}\n")
        f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.user_id}\n")
        f.write(f"–¢–∏–ø –∏–∑–¥–µ–ª–∏—è: {request.design_type}\n")
        f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}\n")
        f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {request.created_at}\n")
        f.write(f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{request.description}\n")
        if request.photo_path:
            f.write(f"–§–∞–π–ª —ç—Å–∫–∏–∑–∞: {request.photo_path}\n")


def notify_admin(bot, chat_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    if not Config.ADMIN_ID:
        return

    request = design_requests[chat_id]
    admin_message = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –¥–∏–∑–∞–π–Ω!\n\n"
        f"–ù–æ–º–µ—Ä: #{request.request_id}\n"
        f"–¢–∏–ø: {request.design_type}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.quantity}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{bot.get_chat(chat_id).username}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{request.description}"
    )

    try:
        if request.photo_path:
            with open(request.photo_path, 'rb') as photo:
                bot.send_photo(
                    Config.ADMIN_ID,
                    photo,
                    caption=admin_message
                )
        else:
            bot.send_message(Config.ADMIN_ID, admin_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")


def clean_up_session(chat_id):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""
    if chat_id in active_design_sessions:
        del active_design_sessions[chat_id]
    if chat_id in design_requests:
        del design_requests[chat_id]